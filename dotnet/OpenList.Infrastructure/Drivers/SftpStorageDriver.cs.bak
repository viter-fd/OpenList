using System.Text.Json;
using Renci.SshNet;
using Renci.SshNet.Sftp;
using OpenList.Core.Models;

namespace OpenList.Infrastructure.Drivers;

public class SftpStorageDriver : BaseStorageDriver
{
    private SftpClient? _client;

    public override void Initialize(JsonElement config)
    {
        var host = config.GetProperty("Host").GetString() 
            ?? throw new InvalidOperationException("Host is required");
        var port = config.TryGetProperty("Port", out var p) ? p.GetInt32() : 22;
        var username = config.GetProperty("Username").GetString() 
            ?? throw new InvalidOperationException("Username is required");
        
        // 支持密码或私钥认证
        if (config.TryGetProperty("Password", out var password) && !string.IsNullOrEmpty(password.GetString()))
        {
            _client = new SftpClient(host, port, username, password.GetString());
        }
        else if (config.TryGetProperty("PrivateKey", out var privateKey) && !string.IsNullOrEmpty(privateKey.GetString()))
        {
            var keyFile = new PrivateKeyFile(new MemoryStream(System.Text.Encoding.UTF8.GetBytes(privateKey.GetString()!)));
            _client = new SftpClient(host, port, username, keyFile);
        }
        else
        {
            throw new InvalidOperationException("Either Password or PrivateKey is required");
        }
    }

    public override async Task<FileList> ListAsync(string path)
    {
        if (_client == null) throw new InvalidOperationException("Driver not initialized");

        return await Task.Run(() =>
        {
            EnsureConnected();
            
            var items = _client.ListDirectory(path);
            var fileItems = new List<FileItem>();

            foreach (var item in items)
            {
                if (item.Name == "." || item.Name == "..") continue;

                fileItems.Add(new FileItem
                {
                    Name = item.Name,
                    Path = $"{path.TrimEnd('/')}/{item.Name}",
                    IsDirectory = item.IsDirectory,
                    Size = item.Length,
                    ModifiedTime = item.LastWriteTime,
                    FileType = item.IsDirectory ? FileType.Folder : GetFileType(item.Name),
                    MimeType = GetMimeType(item.Name)
                });
            }

            return new FileList
            {
                Items = fileItems,
                Path = path
            };
        });
    }

    public override async Task<FileStreamInfo> GetAsync(string path)
    {
        if (_client == null) throw new InvalidOperationException("Driver not initialized");

        return await Task.Run(() =>
        {
            EnsureConnected();

            var stream = new MemoryStream();
            _client.DownloadFile(path, stream);
            stream.Position = 0;

            return new FileStreamInfo
            {
                Stream = stream,
                ContentType = GetMimeType(path),
                ContentLength = stream.Length,
                FileName = Path.GetFileName(path)
            };
        });
    }

    public override async Task<bool> UploadAsync(string path, Stream content)
    {
        if (_client == null) throw new InvalidOperationException("Driver not initialized");

        return await Task.Run(() =>
        {
            EnsureConnected();
            _client.UploadFile(content, path, true);
            return true;
        });
    }

    public override async Task<bool> MakeDirAsync(string path)
    {
        if (_client == null) throw new InvalidOperationException("Driver not initialized");

        return await Task.Run(() =>
        {
            EnsureConnected();
            _client.CreateDirectory(path);
            return true;
        });
    }

    public override async Task<bool> RemoveAsync(string path)
    {
        if (_client == null) throw new InvalidOperationException("Driver not initialized");

        return await Task.Run(() =>
        {
            EnsureConnected();
            
            var item = _client.Get(path);
            if (item.IsDirectory)
            {
                DeleteDirectory(path);
            }
            else
            {
                _client.DeleteFile(path);
            }

            return true;
        });
    }

    public override async Task<bool> RenameAsync(string path, string newName)
    {
        if (_client == null) throw new InvalidOperationException("Driver not initialized");

        return await Task.Run(() =>
        {
            EnsureConnected();

            var directory = Path.GetDirectoryName(path)?.Replace('\\', '/') ?? "/";
            var destPath = $"{directory}/{newName}".Replace("//", "/");
            
            _client.RenameFile(path, destPath);
            return true;
        });
    }

    public override async Task<bool> MoveAsync(string sourcePath, string destPath)
    {
        if (_client == null) throw new InvalidOperationException("Driver not initialized");

        return await Task.Run(() =>
        {
            EnsureConnected();
            _client.RenameFile(sourcePath, destPath);
            return true;
        });
    }

    public override async Task<bool> CopyAsync(string sourcePath, string destPath)
    {
        if (_client == null) throw new InvalidOperationException("Driver not initialized");

        return await Task.Run(() =>
        {
            EnsureConnected();
            
            // SFTP 不直接支持复制，需要先读取再写入
            using var stream = new MemoryStream();
            _client.DownloadFile(sourcePath, stream);
            stream.Position = 0;
            _client.UploadFile(stream, destPath, true);
            
            return true;
        });
    }

    private void EnsureConnected()
    {
        if (_client != null && !_client.IsConnected)
        {
            _client.Connect();
        }
    }

    private void DeleteDirectory(string path)
    {
        if (_client == null) return;

        var items = _client.ListDirectory(path);
        foreach (var item in items)
        {
            if (item.Name == "." || item.Name == "..") continue;

            if (item.IsDirectory)
            {
                DeleteDirectory(item.FullName);
            }
            else
            {
                _client.DeleteFile(item.FullName);
            }
        }

        _client.DeleteDirectory(path);
    }

    public override void Dispose()
    {
        _client?.Disconnect();
        _client?.Dispose();
        base.Dispose();
    }
}
